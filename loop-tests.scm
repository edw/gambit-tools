(include "loop.scm")

(define (loop-fizzbuzz)
  (loop ((seq: x '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (when: (zero? (modulo x 3)) (display "Fizz") (newline))
         (when: (zero? (modulo x 5)) (display "Buzz") (newline)))))

(define (loop-until)
  (loop ((seq: x '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
         (if: (even? x))
         (until: (> x 7)))
    (display x) (newline)))

(define (loop-cons)
  (let ((out '()))
    (loop ((for: a 0.0 (< a 5) (+ a (atan 1)))
           (seq: x '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
           (let: y (+ x a))
           (cons: out))
      y)
    (reverse out)))

(define (loop-seq)
  (let ((out '()))
    (loop ((seq: x '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
           (cons: out))
      x)
    (reverse out)))

(define (loop-let)
  (let ((out '()))
    (loop ((let: x 42)
           (cons: out))
      x)
    (reverse out)))

(define (loop-for)
  (loop ((for: a 0.0 (< a 5) (+ a (atan 1))))
    (display a)
    (newline)))

(define (loop-cons-simple)
  (let ((out '()))
    (loop ((seq: x '(0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))
           (cons: out))
      x)
    (reverse out)))

(define (loop-sum)
  (let ((sum 0))
    (loop ((for: x 0 (< x 10) (+ x 1))
           (cons: sum +))
      x)
    sum))


